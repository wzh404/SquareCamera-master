<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.blueocean.azbrain.dao.ArticleEvaluateMapper">
  <resultMap id="article_evaluate" type="com.blueocean.azbrain.model.ArticleEvaluate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="article_id" jdbcType="INTEGER" property="articleId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="evaluate_code" jdbcType="VARCHAR" property="code" />
    <result column="evaluate_name" jdbcType="VARCHAR" property="name" />
    <result column="evaluate_value" jdbcType="VARCHAR" property="value" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>

  <sql id="Base_Column_List">
    id, article_id, user_id, evaluate_code, evaluate_name, evaluate_value, create_time
  </sql>

  <select id="get" resultMap="article_evaluate">
    select 
      evaluate_code,
      evaluate_name,
      evaluate_value
    from
      azbrain_article_evaluate
    WHERE
      user_id = #{userId}
    AND
      article_id = #{articleId}
  </select>

  <delete id="delete">
      DELETE FROM
        azbrain_article_evaluate
      WHERE
        user_id = #{userId}
      AND
        article_id = #{articleId}
  </delete>

  <insert id="insertBatch" parameterType="com.blueocean.azbrain.model.ArticleEvaluate">
    insert into azbrain_article_evaluate (
      article_id,
      user_id,
      evaluate_code,
      evaluate_name,
      evaluate_value,
      create_time
    )
    values
    <foreach collection ="list" item="eval" separator =",">
    (
      #{eval.articleId,jdbcType=INTEGER},
      #{eval.userId,jdbcType=INTEGER},
      #{eval.code,jdbcType=VARCHAR},
      #{eval.name,jdbcType=VARCHAR},
      #{eval.value,jdbcType=VARCHAR},
      #{eval.createTime,jdbcType=TIMESTAMP}
    )
    </foreach>
  </insert>

  <select id="evaluateOnArticle" resultType="java.util.Map">
    select
      u.name,
      ae.create_time,
      GROUP_CONCAT(evaluate_name,':', evaluate_value) as evaluation
    from
      azbrain_article_evaluate ae
    inner join
      azbrain_user u
    on
      ae.user_id = u.id
    where
      ae.article_id = #{articleId}
    group by
      user_id
  </select>

  <select id="summaryArticleEvaluation" resultType="java.util.Map">
    SELECT
      id,
      GROUP_CONCAT(code, value) as evaluation
    FROM (
      SELECT
        article_id as id,
        evaluate_code as code,
        AVG(evaluate_value) as value
      FROM
        azbrain_article_evaluate ae
      GROUP BY
        ae.article_id, evaluate_code
    ) a
    GROUP BY
      id
  </select>
</mapper>